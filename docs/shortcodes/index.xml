<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Visual Computing</title><link>https://dsramirezc.github.io/vc/docs/shortcodes/</link><description>Recent content on Visual Computing</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://dsramirezc.github.io/vc/docs/shortcodes/index.xml" rel="self" type="application/rss+xml"/><item><title/><link>https://dsramirezc.github.io/vc/docs/shortcodes/Rendering/algoritmo_warnock/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dsramirezc.github.io/vc/docs/shortcodes/Rendering/algoritmo_warnock/</guid><description>Algoritmo de Warnok # El algoritmo de warnock hace parte de los algoritmos de visibilidad y su enfoque esta en renderizar la imagen, dado que tambien existen metodos de ray-tracing. Este algoritmo pertenece a los HSR (Hidden surface removal algorithms), de los cuales buscan pintar imagenes que solo nos permiten ver lo visible sin importar si están entrecruzadas o superpuestas los objetos geométricos que se encuentran en ella. Existen otra variedad de algoritmos como, el algoritmo del pintor, BSP (Binary Space Partitioning), el Z-buffer, el ray-tracing para superficies poliédricas y cuádricas, algoritmo watkins o conocido como el barrido incremental.</description></item><item><title/><link>https://dsramirezc.github.io/vc/docs/shortcodes/Rendering/rasterizing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dsramirezc.github.io/vc/docs/shortcodes/Rendering/rasterizing/</guid><description>Rasterización de Circunferencias # Para la rasterización de una circunferencia podemos calcular los puntos que van a hacer parte del borde en un único octante y simultaneamente añadir de forma análoga los puntos de los otros octantes, en la animación aquí presentada el único octante que se calcula de forma directa es el de color verde y los demás son añadidos en base a dicho cálculo.
El proceso comienza en el punto P=(0,r), a partir de allí en cada iteración se va calculando el punto correspondiente al octante verde si se aumenta la coordenada x, Dado que al aumentar x en uno (++P.</description></item></channel></rss>